datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
}
 
generator client {
    provider      = "cargo prisma"
    output        = "../src/prisma.rs"
}

model Namespace {
  id          Int        @id @default(autoincrement())
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  templates   Template[]
  campaigns   Campaign[]
  servers     Server[]
  lists       List[]
}

model Template {
  id            Int        @id @default(autoincrement())
  namespaceId   Int
  templateName  String
  templateData  Json?
  contentPlaintext String?
  contentHtml   String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  namespace     Namespace  @relation(fields: [namespaceId], references: [id])
  campaigns     Campaign[]
  mails         Mail[]
}

model Campaign {
  id             Int        @id @default(autoincrement())
  campaignName   String
  templateId     Int
  namespaceId    Int
  status         String
  campaignSenderId Int
  scheduledAt    DateTime
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  template       Template   @relation(fields: [templateId], references: [id])
  namespace      Namespace @relation(fields: [namespaceId], references: [id])
  sender         CampaignSender @relation(fields: [campaignSenderId], references: [id])
  mails          Mail[]
  bounceLogs     BounceLog[]
}

model CampaignSender {
  id           Int        @id @default(autoincrement())
  serverId     Int
  fromName     String
  fromEmail    String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  server       Server     @relation(fields: [serverId], references: [id])
  campaigns    Campaign[]
}

model Server {
  id           Int        @id @default(autoincrement())
  host         String
  smtpUsername String
  smtpPassword String
  namespaceId  Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  namespace    Namespace @relation(fields: [namespaceId], references: [id])
  campaignSenders CampaignSender[]
}

model List {
  id          Int        @id @default(autoincrement())
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  namespaceId Int

  namespace   Namespace @relation(fields: [namespaceId], references: [id])
  listContacts ListContact[]
}

model Mail {
  id           Int        @id @default(autoincrement())
  message      String
  contactId    Int
  templateId   Int
  campaignId   Int
  sentAt       DateTime
  status       String

  contact      Contact   @relation(fields: [contactId], references: [id])
  template     Template  @relation(fields: [templateId], references: [id])
  campaign     Campaign  @relation(fields: [campaignId], references: [id])
}

model ListContact {
  listId      Int
  contactId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  list        List     @relation(fields: [listId], references: [id])
  contact     Contact  @relation(fields: [contactId], references: [id])

  @@id([listId, contactId])
}

model Contact {
  id          Int        @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String
  attribute   Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  listContacts ListContact[]
  mails        Mail[]
  bounceLogs   BounceLog[]
}

model BounceLog {
  id           Int        @id @default(autoincrement())
  contactId    Int
  campaignId   Int
  bounceType   String
  bounceReason String
  bouncedAt    DateTime

  contact      Contact   @relation(fields: [contactId], references: [id])
  campaign     Campaign  @relation(fields: [campaignId], references: [id])
}