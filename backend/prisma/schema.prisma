datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "cargo prisma"
  output   = "../src/prisma.rs"
}

model Namespace {
  id         String     @id @default(uuid())
  name       String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  templates  Template[]
  campaigns  Campaign[]
  servers    Server[]
  lists      List[]
}

model Template {
  id                String   @id @default(uuid())
  namespace_id      String
  name     String
  template_data     Json
  content_plaintext String?
  content_html      String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  namespace Namespace  @relation(fields: [namespace_id], references: [id])
  campaigns Campaign[]
  mails     Mail[]
}

model Campaign {
  id                 String   @id @default(uuid())
  name               String
  template_id        String
  namespace_id       String
  status             String
  campaign_sender_id String
  scheduled_at       DateTime
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  template    Template       @relation(fields: [template_id], references: [id])
  namespace   Namespace      @relation(fields: [namespace_id], references: [id])
  sender      CampaignSender @relation(fields: [campaign_sender_id], references: [id])
  mails       Mail[]
  bounce_logs BounceLog[]
}

model CampaignSender {
  id         String   @id @default(uuid())
  server_id  String
  from_name  String
  from_email String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  server    Server     @relation(fields: [server_id], references: [id])
  campaigns Campaign[]
}

model Server {
  id            String   @id @default(uuid())
  host          String
  smtp_username String
  smtp_password String
  namespace_id  String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  namespace        Namespace        @relation(fields: [namespace_id], references: [id])
  campaign_senders CampaignSender[]
}

model List {
  id           String   @id @default(uuid())
  name         String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  namespace_id String

  namespace     Namespace     @relation(fields: [namespace_id], references: [id])
  list_contacts ListContact[]
}

model Mail {
  id          String   @id @default(uuid())
  message     String
  contact_id  String
  template_id String
  campaign_id String
  sent_at     DateTime
  status      String

  contact  Contact  @relation(fields: [contact_id], references: [id])
  template Template @relation(fields: [template_id], references: [id])
  campaign Campaign @relation(fields: [campaign_id], references: [id])
}

model ListContact {
  list_id    String
  contact_id String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  list    List    @relation(fields: [list_id], references: [id])
  contact Contact @relation(fields: [contact_id], references: [id])

  @@id([list_id, contact_id])
}

model Contact {
  id         String   @id @default(uuid())
  first_name String
  last_name  String
  email      String
  attribute  Json
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  list_contacts ListContact[]
  mails         Mail[]
  bounce_logs   BounceLog[]
}

model BounceLog {
  id            String   @id @default(uuid())
  contact_id    String
  campaign_id   String
  bounce_type   String
  bounce_reason String
  bounced_at    DateTime

  contact  Contact  @relation(fields: [contact_id], references: [id])
  campaign Campaign @relation(fields: [campaign_id], references: [id])
}
